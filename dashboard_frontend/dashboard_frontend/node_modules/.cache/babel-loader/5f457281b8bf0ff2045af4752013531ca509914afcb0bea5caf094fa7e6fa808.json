{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\002335631\\\\Documents\\\\sar_documents\\\\archive\\\\archive_dashboard\\\\dashboard_frontend\\\\dashboard_frontend\\\\src\\\\pages\\\\List\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport ContentHeader from '../../components/ContentHeader';\nimport { useParams } from 'react-router-dom';\nimport SelectInput from '../../components/SelectInput';\nimport JobMonitoring from '../../components/JobMonitoring';\nimport radar_run from '../../repositories/radar_run';\nimport myna_run from '../../repositories/myna_run';\nimport formatDate from '../../utils/formatDate';\nimport listOfMonths from '../../utils/months';\nimport { Container, Content, Filters } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [monthSelected, setMonthSelected] = useState(String(new Date().getMonth() + 1));\n  const [yearSelected, setYearSelected] = useState(String(new Date().getFullYear()));\n  const {\n    job\n  } = useParams();\n  const title = useMemo(() => {\n    return job === 'entry-myna' ? 'Myna monitoring' : 'Radar monitoring';\n  }, [job]);\n  const lineColor = useMemo(() => {\n    return job === 'entry-myna' ? '#F7931B' : '#E44C4E';\n  }, [job]);\n  const listData = useMemo(() => {\n    return job === 'entry-myna' ? myna_run : radar_run;\n  }, [job]);\n  const years = useMemo(() => {\n    let uniqueYears = [];\n    listData.forEach(item => {\n      const date = new Date(item.date);\n      const year = date.getFullYear();\n      if (!uniqueYears.includes(year)) {\n        uniqueYears.push(year);\n      }\n    });\n    return uniqueYears.map(year => {\n      return {\n        value: year,\n        label: year\n      };\n    });\n  }, [listData]);\n  const months = useMemo(() => {\n    return listOfMonths.map((month, index) => {\n      return {\n        value: index + 1,\n        label: month\n      };\n    });\n  }, []);\n  useEffect(() => {\n    const filteredDate = listData.filter(item => {\n      const date = new Date(item.date);\n      const month = String(date.getMonth() + 1);\n      const year = String(date.getFullYear());\n      return month === monthSelected && year === yearSelected;\n    });\n    const formattedData = filteredDate.map(item => {\n      return {\n        id: String(new Date().getTime()) + Math.random(),\n        status: item.status,\n        date: formatDate(item.date),\n        tagColor: item.status === 'Successfull' ? \"#41f067\" : \"#f04141\"\n      };\n    });\n    setData(formattedData);\n  }, [listData, monthSelected, yearSelected, data.length]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(ContentHeader, {\n      title: title,\n      lineColor: lineColor,\n      children: [/*#__PURE__*/_jsxDEV(SelectInput, {\n        options: months,\n        onChange: e => setMonthSelected(e.target.value),\n        defaultValue: monthSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(SelectInput, {\n        options: years,\n        onChange: e => setYearSelected(e.target.value),\n        defaultValue: yearSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `tag-filter\n                    tag-filter-success`,\n        children: \"Success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `tag-filter\n                    tag-filter-failed`,\n        children: \"Failed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: data.map(item => /*#__PURE__*/_jsxDEV(JobMonitoring, {\n        tagColor: item.tagColor,\n        date: item.date,\n        status: item.status\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(List, \"5H5pGm5em15JpShguhq46N+Kssk=\", false, function () {\n  return [useParams];\n});\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","ContentHeader","useParams","SelectInput","JobMonitoring","radar_run","myna_run","formatDate","listOfMonths","Container","Content","Filters","jsxDEV","_jsxDEV","List","_s","data","setData","monthSelected","setMonthSelected","String","Date","getMonth","yearSelected","setYearSelected","getFullYear","job","title","lineColor","listData","years","uniqueYears","forEach","item","date","year","includes","push","map","value","label","months","month","index","filteredDate","filter","formattedData","id","getTime","Math","random","status","tagColor","length","children","options","onChange","e","target","defaultValue","fileName","_jsxFileName","lineNumber","columnNumber","type","className","_c","$RefreshReg$"],"sources":["C:/Users/002335631/Documents/sar_documents/archive/archive_dashboard/dashboard_frontend/dashboard_frontend/src/pages/List/index.tsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport { uuid } from 'uuidv4';\r\n\r\nimport  ContentHeader  from '../../components/ContentHeader';\r\nimport { useParams } from 'react-router-dom';\r\nimport  SelectInput  from '../../components/SelectInput';\r\nimport JobMonitoring from '../../components/JobMonitoring';\r\n\r\nimport radar_run from '../../repositories/radar_run';\r\nimport myna_run from '../../repositories/myna_run';\r\n\r\nimport formatDate from '../../utils/formatDate';\r\nimport listOfMonths from '../../utils/months';\r\n\r\nimport { Container, Content, Filters } from './styles';\r\n\r\ninterface IRouteParams {\r\n    job: string;\r\n}\r\n\r\ninterface IData {\r\n    id: string;\r\n    status: string;\r\n    date: string;\r\n    tagColor: string;\r\n}\r\n\r\nconst List: React.FC = () => {\r\n\r\n    const [data, setData] = useState<IData[]>([]);\r\n\r\n    const [monthSelected, setMonthSelected] =  useState<string>(String(new Date().getMonth() + 1)) \r\n\r\n    const [yearSelected, setYearSelected] =  useState<string>(String(new Date().getFullYear())) \r\n\r\n\r\n    const { job } = useParams<keyof IRouteParams>() as IRouteParams;\r\n\r\n    const title = useMemo(() => {\r\n        return  job === 'entry-myna' ? 'Myna monitoring': 'Radar monitoring'\r\n    }, [job]);\r\n\r\n    const lineColor = useMemo(() => {\r\n        return  job === 'entry-myna' ? '#F7931B': '#E44C4E'\r\n    }, [job]);\r\n\r\n\r\n   const listData = useMemo(() => {\r\n    return  job === 'entry-myna' ? myna_run: radar_run;\r\n    }, [job]);\r\n\r\n    \r\n\r\n    const years = useMemo(() => {\r\n        let uniqueYears: number[] = [];\r\n\r\n        listData.forEach(item => {\r\n            const date = new Date(item.date);\r\n            const year = date.getFullYear();\r\n\r\n            if (!uniqueYears.includes(year)) {\r\n                uniqueYears.push(year);\r\n            }\r\n        });\r\n\r\n        return uniqueYears.map( year => {\r\n            return{\r\n                value: year,\r\n                label: year,\r\n            }\r\n        });\r\n\r\n    }, [listData]);\r\n\r\n\r\n    const months = useMemo(() => {\r\n            return listOfMonths.map((month, index) => {\r\n\r\n                return {\r\n                    value: index + 1 ,\r\n                    label:  month,\r\n                }\r\n            \r\n            });\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        const  filteredDate = listData.filter(item => {\r\n\r\n            const date = new Date(item.date)\r\n            const month = String(date.getMonth() + 1);\r\n            const year = String(date.getFullYear());\r\n            return month === monthSelected && year === yearSelected;\r\n        });\r\n\r\n        const formattedData = filteredDate.map(item => { \r\n\r\n            return{\r\n                id: String(new Date().getTime()) + (Math.random()),\r\n                status: item.status,\r\n                date: formatDate(item.date),\r\n                tagColor: item.status === 'Successfull' ? \"#41f067\" : \"#f04141\"\r\n            }\r\n           \r\n        })\r\n        setData(formattedData);\r\n    },[listData, monthSelected, yearSelected, data.length]);\r\n\r\n    return (\r\n        <Container>\r\n        <ContentHeader title ={title} lineColor={lineColor}>\r\n            <SelectInput options= {months} onChange= { (e) => setMonthSelected(e.target.value)} defaultValue={monthSelected}/>\r\n            <SelectInput options= {years} onChange= { (e) => setYearSelected(e.target.value)} defaultValue={yearSelected}/>\r\n        </ContentHeader>\r\n\r\n        <Filters>\r\n                <button \r\n                    type=\"button\"\r\n                    className=\r\n                    {`tag-filter\r\n                    tag-filter-success`}\r\n                >\r\n                    Success\r\n                </button>\r\n\r\n                <button \r\n                    type=\"button\"\r\n                    className= \r\n                    {`tag-filter\r\n                    tag-filter-failed`\r\n                    }\r\n                >\r\n                    Failed\r\n                </button>\r\n        </Filters>\r\n        <Content>\r\n            {\r\n                data.map(item =>(\r\n                    <JobMonitoring \r\n                    key = {item.id}\r\n                    tagColor = {item.tagColor}\r\n                    date = {item.date}\r\n                    status = {item.status}\r\n                    />\r\n\r\n                ))\r\n            \r\n           \r\n            }\r\n        </Content>\r\n\r\n    </Container>\r\n    );\r\n    }\r\nexport default List;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3D,OAAQC,aAAa,MAAO,gCAAgC;AAC5D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAQC,WAAW,MAAO,8BAA8B;AACxD,OAAOC,aAAa,MAAM,gCAAgC;AAE1D,OAAOC,SAAS,MAAM,8BAA8B;AACpD,OAAOC,QAAQ,MAAM,6BAA6B;AAElD,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,YAAY,MAAM,oBAAoB;AAE7C,SAASC,SAAS,EAAEC,OAAO,EAAEC,OAAO,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAavD,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAU,EAAE,CAAC;EAE7C,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAIpB,QAAQ,CAASqB,MAAM,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAE9F,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAIzB,QAAQ,CAASqB,MAAM,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC;EAG3F,MAAM;IAAEC;EAAI,CAAC,GAAGxB,SAAS,CAAqB,CAAiB;EAE/D,MAAMyB,KAAK,GAAG7B,OAAO,CAAC,MAAM;IACxB,OAAQ4B,GAAG,KAAK,YAAY,GAAG,iBAAiB,GAAE,kBAAkB;EACxE,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;EAET,MAAME,SAAS,GAAG9B,OAAO,CAAC,MAAM;IAC5B,OAAQ4B,GAAG,KAAK,YAAY,GAAG,SAAS,GAAE,SAAS;EACvD,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;EAGV,MAAMG,QAAQ,GAAG/B,OAAO,CAAC,MAAM;IAC9B,OAAQ4B,GAAG,KAAK,YAAY,GAAGpB,QAAQ,GAAED,SAAS;EAClD,CAAC,EAAE,CAACqB,GAAG,CAAC,CAAC;EAIT,MAAMI,KAAK,GAAGhC,OAAO,CAAC,MAAM;IACxB,IAAIiC,WAAqB,GAAG,EAAE;IAE9BF,QAAQ,CAACG,OAAO,CAACC,IAAI,IAAI;MACrB,MAAMC,IAAI,GAAG,IAAIb,IAAI,CAACY,IAAI,CAACC,IAAI,CAAC;MAChC,MAAMC,IAAI,GAAGD,IAAI,CAACT,WAAW,CAAC,CAAC;MAE/B,IAAI,CAACM,WAAW,CAACK,QAAQ,CAACD,IAAI,CAAC,EAAE;QAC7BJ,WAAW,CAACM,IAAI,CAACF,IAAI,CAAC;MAC1B;IACJ,CAAC,CAAC;IAEF,OAAOJ,WAAW,CAACO,GAAG,CAAEH,IAAI,IAAI;MAC5B,OAAM;QACFI,KAAK,EAAEJ,IAAI;QACXK,KAAK,EAAEL;MACX,CAAC;IACL,CAAC,CAAC;EAEN,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAGd,MAAMY,MAAM,GAAG3C,OAAO,CAAC,MAAM;IACrB,OAAOU,YAAY,CAAC8B,GAAG,CAAC,CAACI,KAAK,EAAEC,KAAK,KAAK;MAEtC,OAAO;QACHJ,KAAK,EAAEI,KAAK,GAAG,CAAC;QAChBH,KAAK,EAAGE;MACZ,CAAC;IAEL,CAAC,CAAC;EAEV,CAAC,EAAE,EAAE,CAAC;EAGN1C,SAAS,CAAC,MAAM;IACZ,MAAO4C,YAAY,GAAGf,QAAQ,CAACgB,MAAM,CAACZ,IAAI,IAAI;MAE1C,MAAMC,IAAI,GAAG,IAAIb,IAAI,CAACY,IAAI,CAACC,IAAI,CAAC;MAChC,MAAMQ,KAAK,GAAGtB,MAAM,CAACc,IAAI,CAACZ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MACzC,MAAMa,IAAI,GAAGf,MAAM,CAACc,IAAI,CAACT,WAAW,CAAC,CAAC,CAAC;MACvC,OAAOiB,KAAK,KAAKxB,aAAa,IAAIiB,IAAI,KAAKZ,YAAY;IAC3D,CAAC,CAAC;IAEF,MAAMuB,aAAa,GAAGF,YAAY,CAACN,GAAG,CAACL,IAAI,IAAI;MAE3C,OAAM;QACFc,EAAE,EAAE3B,MAAM,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC2B,OAAO,CAAC,CAAC,CAAC,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAE;QAClDC,MAAM,EAAElB,IAAI,CAACkB,MAAM;QACnBjB,IAAI,EAAE3B,UAAU,CAAC0B,IAAI,CAACC,IAAI,CAAC;QAC3BkB,QAAQ,EAAEnB,IAAI,CAACkB,MAAM,KAAK,aAAa,GAAG,SAAS,GAAG;MAC1D,CAAC;IAEL,CAAC,CAAC;IACFlC,OAAO,CAAC6B,aAAa,CAAC;EAC1B,CAAC,EAAC,CAACjB,QAAQ,EAAEX,aAAa,EAAEK,YAAY,EAAEP,IAAI,CAACqC,MAAM,CAAC,CAAC;EAEvD,oBACIxC,OAAA,CAACJ,SAAS;IAAA6C,QAAA,gBACVzC,OAAA,CAACZ,aAAa;MAAC0B,KAAK,EAAGA,KAAM;MAACC,SAAS,EAAEA,SAAU;MAAA0B,QAAA,gBAC/CzC,OAAA,CAACV,WAAW;QAACoD,OAAO,EAAGd,MAAO;QAACe,QAAQ,EAAKC,CAAC,IAAKtC,gBAAgB,CAACsC,CAAC,CAACC,MAAM,CAACnB,KAAK,CAAE;QAACoB,YAAY,EAAEzC;MAAc;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAClHlD,OAAA,CAACV,WAAW;QAACoD,OAAO,EAAGzB,KAAM;QAAC0B,QAAQ,EAAKC,CAAC,IAAKjC,eAAe,CAACiC,CAAC,CAACC,MAAM,CAACnB,KAAK,CAAE;QAACoB,YAAY,EAAEpC;MAAa;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpG,CAAC,eAEhBlD,OAAA,CAACF,OAAO;MAAA2C,QAAA,gBACAzC,OAAA;QACImD,IAAI,EAAC,QAAQ;QACbC,SAAS,EACP;AACtB,uCAAwC;QAAAX,QAAA,EACvB;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAETlD,OAAA;QACImD,IAAI,EAAC,QAAQ;QACbC,SAAS,EACP;AACtB,sCACqB;QAAAX,QAAA,EACJ;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACVlD,OAAA,CAACH,OAAO;MAAA4C,QAAA,EAEAtC,IAAI,CAACsB,GAAG,CAACL,IAAI,iBACTpB,OAAA,CAACT,aAAa;QAEdgD,QAAQ,EAAInB,IAAI,CAACmB,QAAS;QAC1BlB,IAAI,EAAID,IAAI,CAACC,IAAK;QAClBiB,MAAM,EAAIlB,IAAI,CAACkB;MAAO,GAHflB,IAAI,CAACc,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CAEJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAID,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEZ,CAAC;AAAAhD,EAAA,CAhICD,IAAc;EAAA,QASAZ,SAAS;AAAA;AAAAgE,EAAA,GATvBpD,IAAc;AAiIpB,eAAeA,IAAI;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}